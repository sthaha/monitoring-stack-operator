#
# Deploys the monitoring stack resource to management clusters
# Seeds the telemetry client secret
#
apiVersion: v1
kind: Template
metadata:
  name: management-cluster-monitoring-stack
objects:

# Deploys the HyperShift monitoring stack
- apiVersion: monitoring.rhobs/v1alpha1
  kind: MonitoringStack
  metadata:
    name: hypershift-monitoring-stack
    namespace: ${NAMESPACE}
  spec:
    resourceSelector: {}
    namespaceSelector:
      matchExpressions:
        - key: hypershift.openshift.io/monitoring
          operator: Exists
    replicas: 2
    logLevel: info
    retention: 2h
    alertmanagerConfig:
      disabled: true
    prometheusConfig:
      enableRemoteWriteReceiver: true
      externalLabels:
        _mc_id: ${CLUSTER_ID}
        region: ${CLUSTER_REGION}
        env: ${RHOBS_ENV}
      remoteWrite:
      - name: HCP RHOBS
        url: ${RHOBS_URL}
        oauth2:
          clientId:
            secret:
              key: client-id
              name: rhobs-hypershift-credential
          clientSecret:
              key: client-secret
              name: rhobs-hypershift-credential
          tokenUrl: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        queueConfig:
          capacity: 2500
          maxShards: 500
          minShards: 1
          maxSamplesPerSend: 2000
          batchSendDeadline: 60s
          minBackoff: 30ms
          maxBackoff: 256s
        metadataConfig:
          send: false
        writeRelabelConfigs:
        - sourceLabels: [__name__, source]
          action: keep
          separator: ;
        # We filter HCP metrics based on their names
        # and
        # We forward all metrics with the source label DP as the filtering happens in preceding DP-> MC forwarding side step
        # We forward all metrics with the source label MC, MC metrics are filtered in the federation service monitor
        # As `sourceLabels: [__name__, source]` results in a concatenation fo the two labels followed by a regexp match with the below, the HCP metrics look like `apiserver_audit_event_total;`, and DP metrics look like `dp_metric_name;DP`, hence the `;.*` and `.*;DP` in the below regexp.
          regex: '(apiserver_audit_error_total;.*|apiserver_audit_event_total;.*|apiserver_request_duration_seconds_bucket;.*|apiserver_request_duration_seconds_count;.*|apiserver_request_total;.*|cluster_infrastructure_provider;.*|cluster_operator_conditions;.*|cluster_operator_up;.*|etcd_disk_backend_commit_duration_seconds_bucket;.*|etcd_disk_wal_fsync_duration_seconds_bucket;.*|etcd_network_peer_round_trip_time_seconds_bucket;.*|etcd_server_has_leader;.*|grpc_server_handled_total;.*|grpc_server_handling_seconds_bucket;.*|hypershift:apiserver_request_aborts_total;.*|hypershift:controlplane:component_cpu_request;.*|hypershift:controlplane:component_cpu_usage_seconds;.*|hypershift:controlplane:component_memory_request;.*|hypershift:controlplane:component_memory_rss;.*|hypershift:controlplane:component_memory_usage;.*|hypershift:operator:component_api_requests_total;.*|hypershift_*;.*|ingress_canary_check_duration_bucket;.*|ingress_canary_check_duration_count;.*|ingress_controller_conditions;.*|cluster_version;.*|probe_success;.*|config_policy_evaluation_total;.*|policy_system_errors_total;.*|kube_pod_container_status_restarts_total;.*|controller_runtime_reconcile_total;.*|controller_runtime_reconcile_errors_total;.*|workqueue_depth;.*|.*;DP|.*;MC)'
        # Matches 'no label'.
        # Basically: if source is defined already (i.e on the data plane/management cluster), keep the label.
        # Otherwise, use HCP
        - action: replace
          regex: $^
          replacement: HCP
          sourceLabels:
          - source
          targetLabel: source
      - name: HCP Telemetry
        url: ${HCP_TELEMETER_URL}
        authorization:
          type: Bearer
          credentials:
            name: hypershift-telemeter-client
            key: token
        queueConfig:
          capacity: 2500
          maxShards: 500
          minShards: 1
          maxSamplesPerSend: 2000
          batchSendDeadline: 60s
          minBackoff: 30ms
          maxBackoff: 256s
        metadataConfig:
          send: false
        writeRelabelConfigs:
        - sourceLabels: [__name__]
          action: keep
          regex: ${TELEMETRY_METRICS_SET}
        # Matches 'no label'.
        # Basically: if source is defined already (i.e on the dataplane), keep the label.
        # Otherwise, use HCP
        - action: replace
          regex: $^
          replacement: HCP
          sourceLabels:
          - source
          targetLabel: source
    resources:
      requests:
        cpu: 500m
        memory: 1Gi

# Deploy the monitoring stack custom resource for ACM
- apiVersion: monitoring.rhobs/v1alpha1
  kind: MonitoringStack
  metadata:
    name: acm-monitoring-stack
    namespace: ${NAMESPACE}
  spec:
    resourceSelector: {}
    namespaceSelector:
      matchExpressions:
      - key: kubernetes.io/metadata.name
        operator: In
        values:
        - open-cluster-management-agent-addon
    replicas: 2
    logLevel: debug
    retention: 1d
    alertmanagerConfig:
      disabled: true
    prometheusConfig:
      externalLabels:
        _mc_id: ${CLUSTER_ID}
        cluster: ${CLUSTER_ID}
        region: ${CLUSTER_REGION}
        env: ${RHOBS_ENV}
      remoteWrite:
      - url: ${RHOBS_URL}
        oauth2:
          clientId:
            secret:
              key: client-id
              name: rhobs-hypershift-credential
          clientSecret:
              key: client-secret
              name: rhobs-hypershift-credential
          tokenUrl: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        queueConfig:
          capacity: 2500
          maxShards: 1000
          minShards: 1
          maxSamplesPerSend: 500
          batchSendDeadline: 60s
          minBackoff: 30ms
          maxBackoff: 256s
        writeRelabelConfigs:
        # Matches 'no label'.
        # Basically: if source is defined already (i.e on the dataplane), keep the label.
        # Otherwise, use ACM
        - action: replace
          regex: $^
          replacement: ACM
          sourceLabels:
          - source
          targetLabel: source
    resources:
      requests:
        cpu: 100m
        memory: 512M

# Grant hypershift-monitoring-stack service account cluster-monitoring-view cluster role
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      hive.openshift.io/managed: "true"
    name: hypershift-ms-view
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-monitoring-view
  subjects:
  - kind: ServiceAccount
    name: hypershift-monitoring-stack-prometheus
    namespace: openshift-observability-operator

# Service monitor to federate Management Cluster CMO metrics
# Management Cluster metric filtering is done here
- apiVersion: monitoring.rhobs/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/name: prometheus
    name: hypershift-cmo-federate
    namespace: ${OPENSHIFT_MONITORING_NAMESPACE}
  spec:
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: prometheus
        app.kubernetes.io/instance: k8s
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/part-of: openshift-monitoring
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      honorLabels: true
      interval: 30s
      relabelings:
      - targetLabel: source
        replacement: MC
      port: web
      scheme: https
      path: "/federate"
      params:
        'match[]':
          - '{__name__=~"container_cpu_usage_seconds_total|container_fs_writes_bytes_total|kube_deployment_spec_replicas|kube_deployment_status_condition|kube_deployment_status_replicas_available|kube_deployment_status_replicas_ready|kube_deployment_status_replicas_unavailable|kube_deployment_status_replicas_updated|kube_pod_deletion_timestamp|kube_pod_info|kube_pod_resource_limit|kube_pod_resource_request|kube_pod_start_time|kube_pod_status_ready|kube_pod_status_reason|kube_pod_status_scheduled_time|kube_pod_status_unschedulable|kube_pod_tolerations|kube_poddisruptionbudget_status_current_healthy|kube_poddisruptionbudget_status_desired_healthy|kube_poddisruptionbudget_status_expected_pods|kube_running_pod_ready|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_free|kubelet_volume_stats_inodes_used|kubelet_volume_stats_used_bytes|node_namespace_pod:kube_pod_info:|node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate|pod:container_cpu_usage:sum|prober_probe_total|mce_hs_addon_failed_to_start_bool|mce_hs_addon_install_in_progress_bool|mce_hs_addon_install_failing_gauge_bool|mce_hs_addon_install_failure_gauge|mce_hs_addon_placement_score_failure_count|mce_hs_addon_cluster_claims_failure_count|mce_hs_addon_kubeconfig_secret_copy_failure_count|mce_hs_addon_hub_sync_failure_count|mce_hs_addon_total_hosted_control_planes_gauge|mce_hs_addon_available_hosted_control_planes_gauge|mce_hs_addon_available_hosted_clusters_gauge|mce_hs_addon_deleted_hosted_clusters_gauge|mce_hs_addon_max_hosted_clusters_gauge|mce_hs_addon_threshold_hosted_clusters_gauge|mce_hs_addon_hypershift_operator_degraded_bool|mce_hs_addon_ext_dns_operator_degraded_bool|mce_hs_addon_aws_s3_bucket_secret_configured_bool|mce_hs_addon_total_reconcile_count|mce_hs_addon_failed_reconcile_count|mce_hs_addon_reconcile_requeue_count"}'
      tlsConfig:
        ca:
          configMap:
            key: service-ca.crt
            name: serving-certs-ca-bundle
        cert:
          secret:
            key: tls.crt
            name: metrics-client-certs
        keySecret:
          key: tls.key
          name: metrics-client-certs
        serverName: prometheus-k8s.openshift-monitoring.svc

# Workaround to seed the telemeter remote-write secret in management clusters
- apiVersion: v1
  kind: Namespace
  metadata:
    name: ${JOB_NAME}

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${JOB_NAME}
    namespace: ${JOB_NAME}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: telemeter-client-view
    namespace: ${OPENSHIFT_MONITORING_NAMESPACE}
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    resourceNames:
    - "telemeter-client"
    verbs:
    - "get"

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: ${JOB_NAME}-telemeter-client-view
    namespace: ${OPENSHIFT_MONITORING_NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: telemeter-client-view
  subjects:
  - kind: ServiceAccount
    name: ${JOB_NAME}
    namespace: ${JOB_NAME}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: obo-secrets-edit
    namespace: ${OBO_NAMESPACE}
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - "create"
    - "edit"

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: ${JOB_NAME}-edit
    namespace: ${OBO_NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: obo-secrets-edit
  subjects:
  - kind: ServiceAccount
    name: ${JOB_NAME}
    namespace: ${JOB_NAME}

- apiVersion: batch/v1
  kind: Job
  metadata:
    name: create-telemeter-remotewrite-secret
    namespace: ${JOB_NAME}
  spec:
    template:
      spec:
        containers:
        - name: create-telemeter-remotewrite-secret
          image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          command:
          - bash
          - -c
          - |
            AUTH="$(oc get secret -n openshift-monitoring telemeter-client -o jsonpath='{.data.token}' | base64 -d)"
            TOKEN="$(echo -n "{\"authorization_token\":\"$AUTH\",\"cluster_id\":\"${CLUSTER_ID}\"}" | base64 -w 0)"
            oc create secret generic ${SECRET_NAME} --from-literal=token=$TOKEN -n ${OBO_NAMESPACE}
        serviceAccountName: ${JOB_NAME}
        restartPolicy: Never

parameters:
- name: CLUSTER_ID
  required: true
- name: CLUSTER_REGION
  required: true
- name: TELEMETRY_METRICS_SET
  required: true
- name: RHOBS_URL
  value: placeholder_url
- name: HCP_TELEMETER_URL
  required: true
- name: NAMESPACE
  value: openshift-observability-operator
- name: JOB_NAME
  value: seed-telemetry-secret
- name: RHOBS_ENV
  value: placeholdervalue
- name: OPENSHIFT_MONITORING_NAMESPACE
  value: openshift-monitoring
- name: OBO_NAMESPACE
  value: openshift-observability-operator
- name: SECRET_NAME
  value: hypershift-telemeter-client
